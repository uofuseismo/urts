#ifndef URTS_BROADCASTS_INTERNAL_ORIGIN_ARRIVAL_HPP
#define URTS_BROADCASTS_INTERNAL_ORIGIN_ARRIVAL_HPP
#include <memory>
#include <ostream>
#include <chrono>
#include <vector>
#include <optional>
#include <string>
namespace URTS::Broadcasts::Internal::Pick
{
 class UncertaintyBound;
}
namespace URTS::Broadcasts::Internal::Origin
{
/// @class Arrival "arrival.hpp" "urts/broadcasts/internal/origin/arrival.hpp"
/// @brief Defines an arrival (an associated pick).
/// @copyright Ben Baker (University of Utah) distributed under the MIT license.
/// @ingroup Messages_MessageFormats_Origin
class Arrival
{
public:
    /// @brief The arrival's first motion.  For example, if this is a direct P
    ///        arrival arriving at a station with Z positive up then an "Up"
    ///        first motion indicates compression, "Down" would indicate
    ///        dilitation, and "Unknown" would be indeterminate.
    enum class FirstMotion : int8_t
    {
        Unknown = 0, /*!< Unknown polarity. */
        Up      = 1, /*!< The arrival corresponds to an upward first motion. */
        Down    =-1  /*!< The arrival corresponds to a downward first motion .*/
    };
    /// @brief Sets the review status as either being purely automatic - i.e.,
    ///        there was no review, or the arrival was manually reviewed, 
    ///        possibly edited, then published.
    enum class ReviewStatus : int8_t
    {
        Automatic = 0, /*!< This is an automatic pick generated by an algorithm. */
        Manual    = 1  /*!< This is a pick created or reviewed by a human. */
    };
    /// @brief Define's the seismic phase of this arrival.
    enum class Phase : int8_t
    {
        P = 0,  /*!< The phase arrival is for a P phase. */
        S = 1   /*!< The phase arrival is for an S phase. */ 
    }; 
public:
    /// @name Constructors
    /// @{

    /// @brief Constructor.
    Arrival();
    /// @brief Copy constructor.
    /// @param[in] arrival  The arrival class from which to initialize
    ///                     this class.
    Arrival(const Arrival &arrival);
    /// @brief Move constructor.
    /// @param[in,out] arrival  The arrival class from which to initialize this
    ///                      class.  On exit, arrival's behavior is undefined.
    Arrival(Arrival &&arrival) noexcept;
    /// @}

    /// @name Operators
    /// @{

    /// @brief Copy assignment.
    /// @param[in] arrival  The arrival class to copy to this.
    /// @result A deep copy of the arrival.
    Arrival& operator=(const Arrival &arrival);
    /// @brief Move assignment.
    /// @param[in,out] arrival  The arrival class whose memory will be moved to
    ///                      this.  On exit arrival's behavior is undefined.
    /// @result The memory from arrival moved to this.
    Arrival& operator=(Arrival &&arrival) noexcept;
    /// @}

    /// @name Required Information
    /// @{

    /// @brief Sets the phase onset time.
    /// @param[in] time  The time (UTC) of thearrival.  This is measured in
    ///                  seconds since the epoch (Jan 1, 1970).
    /// @note This time will be rounded to the nearest microsecond.
    void setTime(double time) noexcept;
    /// @brief Sets the phase onset time.
    /// @param[in] time  The time (UTC) of the arrival.  This is measured in
    ///                  microseconds since the epoch (Jan 1, 1970).
    void setTime(const std::chrono::microseconds &time) noexcept;
    /// @result The time (UTC) of the arrival in microseconds since the epoch.
    /// @throws std::runtime_error if \c haveTime() is false.
    [[nodiscard]] std::chrono::microseconds getTime() const;
    /// @result True indicates that the arrival time was set.
    [[nodiscard]] bool haveTime() const noexcept;
 
    /// @brief Sets the network code on which the pick was made.
    /// @param[in] network  The network code.
    /// @throws std::invalid_argument if network is empty.
    void setNetwork(const std::string &network);
    /// @result The network code.
    /// @throws std::runtime_error if \c haveNetwork() is false.
    [[nodiscard]] std::string getNetwork() const;
    /// @result True indicates that the network was set.
    [[nodiscard]] bool haveNetwork() const noexcept;

    /// @brief Sets the station name on which the pick was made.
    /// @param[in] station   The station name.
    /// @throws std::invalid_argument if station is empty.
    void setStation(const std::string &station); 
    /// @result The station name.
    /// @throws std::runtime_error if \c haveStation() is false.
    [[nodiscard]] std::string getStation() const;
    /// @result True indicates that the station name was set.
    [[nodiscard]] bool haveStation() const noexcept;

    /// @brief Sets the channel name on which the pick was made.
    /// @param[in] channel  The channel name.
    /// @throws std::invalid_argument if channel is empty.
    void setChannel(const std::string &channel);
    /// @result The channel name.
    /// @throws std::runtime_error if the channel was not set.
    [[nodiscard]] std::string getChannel() const;
    /// @result True indicates that the channel was set.
    [[nodiscard]] bool haveChannel() const noexcept;

    /// @brief Sets the location code.
    /// @param[in] location  The location code.
    /// @throws std::invalid_argument if location is empty.
    void setLocationCode(const std::string &location);
    /// @brief Sets the channel code on which the pick was made.
    /// @throws std::runtime_error if \c haveLocationCode() is false.
    [[nodiscard]] std::string getLocationCode() const;
    /// @result True indicates that the location code was set.
    [[nodiscard]] bool haveLocationCode() const noexcept;
    /// @} 

    /// @brief Sets a unique arrival identification number.
    /// @param[in] identifier   The unique arrival identification number.
    void setIdentifier(uint64_t identifier) noexcept;
    /// @result The unique arrival identification number.
    /// @throws std::runtime_error if \c haveIdentifier() is false.
    [[nodiscard]] uint64_t getIdentifier() const;
    /// @result True indicates that the arrival identifier was set.
    [[nodiscard]] bool haveIdentifier() const noexcept;

    /// @brief Sets the arrival's seismic phase.
    /// @param[in] phase  The phase - e.g., P or S.
    void setPhase(const Phase phase) noexcept;
    /// @result The phase.
    /// @throws std::runtime_error if \c havePhase() is false.
    [[nodiscard]] Phase getPhase() const; 
    /// @result True indicates the phase was set.
    [[nodiscard]] bool havePhase() const noexcept;
    /// @}

    /// @name Optional Information
    /// @{

    /// @brief The threshold pickers typically work on a channel that was
    ///        converted from an original (or multiple original) channels
    ///        to a derived channel.
    /// @param[in] originalChannels  The original channels that were converted
    ///                              to a signal on which something like the
    ///                              threshold picker operated upon.  For three
    ///                              component data this could be
    ///                              "HHZ", "HHN", "HHE".  For one component
    ///                              data this could be "HHZ".
    void setOriginalChannels(const std::vector<std::string> &originalChannels) noexcept; 
    /// @result The original channels that were converted to a dervied 
    ///         signal on which something like the threshold picker operated.
    [[nodiscard]] std::vector<std::string> getOriginalChannels() const noexcept;

    /// @brief Sets the travel time residual.
    void setResidual(double residual) noexcept;
    /// @result The travel time residual in seconds.
    [[nodiscard]] std::optional<double> getResidual() const noexcept;

    /// @brief Sets the first motion of the arrival.
    /// @param[in] firstMotion  The arrival's first motion.
    void setFirstMotion(FirstMotion polarity) noexcept;
    /// @result The arrivals first motion.  By default this is unknown.
    [[nodiscard]] FirstMotion getFirstMotion() const noexcept;

    /// @brief Sets the list of the processing algorithms used to arrive
    ///        at this pick.
    /// @param[in] algorithms  The algorithms used to arrive at this pick. 
    void setProcessingAlgorithms(const std::vector<std::string> &algorithms) noexcept;
    /// @result The algorithms used to arrive at this pick.
    [[nodiscard]] std::vector<std::string> getProcessingAlgorithms() const noexcept;

    /// @brief Sets the lower and upper uncertainty bound.
    /// @throws std::invalid_argument if the lowerBound exceeds the upperBound.
    void setLowerAndUpperUncertaintyBound(const std::pair<Pick::UncertaintyBound, Pick::UncertaintyBound> &lowerAndUpperBound);
    /// @result The lower and upper uncertainty bounds on the arrival time.
    [[nodiscard]] std::optional<std::pair<Pick::UncertaintyBound, Pick::UncertaintyBound>> getLowerAndUpperUncertaintyBound() const;

    /// @brief Sets the signal to noise ratio
    ///        (20*log10( RMS(signal)/RMS(noise) )).
    /// @param[in] signalToNoiseRatio   The signal to noise ratio in decibels.
    void setSignalToNoiseRatio(double signalToNoiseRatio) noexcept;
    /// @result The signal to noise ratio in decibels.
    [[nodiscard]] std::optional<double> getSignalToNoiseRatio() const noexcept;

    /// @brief Since interactive algorithms allow for human revision we denote
    ///        a status flag as either human reviewed or automatic.
    /// @param[in] status  The review status of the pick.
    void setReviewStatus(ReviewStatus status) noexcept;
    /// @result The review status.  By default this is automatic.
    [[nodiscard]] ReviewStatus getReviewStatus() const noexcept;

    /// @brief Sets the origin to which this arrival is associated.
    void setOriginIdentifier(uint64_t identifier) noexcept;
    /// @result The origin to which this arrival is associated.
    std::optional<uint64_t> getOriginIdentifier() const noexcept;  
    /// @}

    /// @name Destructors
    /// @{

    /// @brief Resets the class and releases all memory.
    void clear() noexcept;
    /// @brief Destructor.
    ~Arrival();
    /// @}
private:
    class ArrivalImpl;
    std::unique_ptr<ArrivalImpl> pImpl;
};
/// @result Prints a valid pick class as a JSON object. 
///         If the pick is invalid then the result is nothing.
std::ostream& operator<<(std::ostream &os, const Arrival &arrival);
}
#endif
